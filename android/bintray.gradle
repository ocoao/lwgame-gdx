import java.util.zip.ZipFile

// bintray for android
apply plugin: 'com.jfrog.bintray'

version = MVN_PRJ_VERSION

//task compileJava {}
//task processResources {}
//task classes {}
task jar(type: Jar) {
//    from("$buildDir/intermediates/classes/release/com/android/vending", "$buildDir/intermediates/classes/release/com/lwgame/gdx")
    from("$buildDir/intermediates/classes/release")
    exclude("android/", "com/google/")
}
//jar.dependsOn(build)

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
sourcesJar.dependsOn(jar)

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    //source += "$buildDir/generated/source/aidl/**/*.java"
    exclude '**/*.aidl'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += project.configurations.compile
    classpath += project.files("$buildDir/intermediates/classes/debug/")
    afterEvaluate {
        def aarDependencies = classpath.filter {
            it.name.endsWith(".aar")
        }
        classpath -= aarDependencies
        aarDependencies.each { aar ->
            def outputPath = "$buildDir/tmp/exploded-aar/${aar.name.replace('.aar', '.jar')}"
            classpath += files(outputPath)

            dependsOn task(name: "extract ${aar.name}").doLast {
                extractJar(aar, 'classes.jar', outputPath)
            }
        }
    }
}

private def extractJar(archive, entry, output) {
    if (!archive.exists()) {
        throw new GradleException("archive $archive not found")
    }
    def zip = new ZipFile(archive)
    zip.entries().each {
        if (it.name == entry) {
            def path = new File(output)
            if (!path.exists()) {
                path.getParentFile().mkdirs()
                def buf = new byte[4096]
                def is = zip.getInputStream(it)
                def os = new FileOutputStream(path)
                def len
                while ((len = is.read(buf)) != -1) {
                    os.write(buf, 0, len)
                }
                os.flush()
                os.close()

            }
        }
    }
    zip.close()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
    archives jar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = MVN_PRJ_REPO
        //userOrg = properties.getProperty("bintray.org")
        name = MVN_PRJ_NAME
        desc = MVN_PRJ_DESC
        websiteUrl = MVN_PRJ_URL
        issueTrackerUrl = MVN_PRJ_ISSUE
        vcsUrl = MVN_PRJ_CONN
        licenses = ["Apache-2.0"]
        publish = true
        publicDownloadNumbers = true
    }
}

javadoc {
    options {
        encoding 'utf-8'
        charSet 'utf-8'
    }
}